#+TITLE: My Emacs
#+AUTHOR: Frank Vumbaca

* Package Management
  Sets pakage repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.milkbox.net/packages/") t)
(package-initialize)

#+END_SRC

Configure use-package
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

; Default all packages to always be installed
;(setq use-package-always-ensure t)

#+END_SRC

* Evil Mode
  The dark side is the best side :smile:.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :demand t
    :defer .1
    :after (evil-leader)
    :init
    (setq evil-default-cursor t)
    :config
    (evil-mode t)
    (with-eval-after-load 'evil-maps)
    ; Disable evil mode RET here to make org links easier to nav
    (define-key evil-motion-state-map (kbd "RET") nil)
    (message "Loading evil-mode...done"))

  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    :ensure t
    :config
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
      "f" `find-file
      "b" 'switch-to-buffer
      "B" 'buffer-menu-other-window
      "w" 'kill-this-buffer
      "q" 'delete-window
      "Q" 'kill-buffer-and-window
      ;; "d" 'neotree-toggle
      "d" 'neotree-project-dir
      "g" 'magit-status
      "j" 'windmove-down
      "k" 'windmove-up
      "h" 'windmove-left
      "l" 'windmove-right
      "J" (lambda () (interactive) (split-window-vertically) (windmove-down))
      "K" (lambda () (interactive) (split-window-vertically))
      "H" (lambda () (interactive) (split-window-horizontally))
      "L" (lambda () (interactive) (split-window-horizontally) (windmove-right))
      "p" 'projectile-command-map
      "a" 'org-agenda
      "n" 'next-buffer
      "N" 'previous-buffer
      "." (lambda () (interactive) (find-file "~/notes/index.org"))
      "," (lambda () (interactive) (find-file "~/.emacs.d/config.org")))

    (evil-leader/set-key-for-mode 'elixir-mode
      "SPC y" (lambda() (interactive) (alchemist-project-toggle-file-and-tests))
      "SPC Y" (lambda() (interactive) (alchemist-mix--test-file (buffer-file-name)))
      "SPC t" (lambda() (interactive) (alchemist-mix-rerun-last-test))
      "SPC T" (lambda() (interactive) (alchemist-mix-test)))

    (evil-leader/set-key-for-mode 'org-mode
      "SPC c" 'org-toggle-checkbox))

  (use-package evil-magit
    :demand t
    :after (magit evil))

#+END_SRC

* Org Mode
  Org mode settings.
#+BEGIN_SRC emacs-lisp

(setq org-return-follows-link t)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(setq org-log-done 'time) ; Mark done items with completion time

(use-package org-bullets
  :ensure t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))

(use-package evil-org
  :ensure t
  :hook
  (org-mode . evil-org-mode)
  (evil-org-mode . (lambda () (evil-org-set-key-theme)))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+END_SRC

Add files to be read by org-agenda

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files (list "~/notes/agenda.org"))

#+END_SRC

* maGit
** Open-merge-me plugin prototype
*** Source Code
Custom functions to create merge requests.
#+BEGIN_SRC emacs-lisp
(defun omm-git-exec (args)
  "Execute arbitrary git commands and remove trailing new lines."
  (let ((res (shell-command-to-string (concat "git " args))))
    (if (string= (concat (substring res 0 -1) " ") res)
        (substring res 0 -1)
      res)))
     
(defun omm-get-local-branch ()
  "Gets the name of the current branch."
  (omm-git-exec "rev-parse --abbrev-ref HEAD"))
  
(defun omm-parse-repo-host (remote)
  "Given a remote ssh host, parse the website url."
  (string-match "@\\(\[^\s]+\\):\d*" remote)
  (match-string 1 remote))

(defun omm-parse-repo-path (remote)
  "Given a remote ssh host, parse the uri path to the project."
  (if (string-match "git@[^\s]+\:[0-9]*\/\\([^\s]+\\)\\.git$" remote)
      (match-string 1 remote)
    nil))

(defun omm-get-repo-link ()
  "Build the link to the hosting service's project page"
  (let* ((remote (omm-git-exec "config --get remote.origin.url"))
         (host (omm-parse-repo-host remote))
         (path (omm-parse-repo-path remote)))
    (concat host "/" path)))

(defun omm-get-remote-branch
    (branch)
  "Return the current set remote branch for project in PROJECT-PATH."
  (let ((merge (omm-git-exec (concat "config --get branch." branch ".merge")))
        remote-branch)
    (string-match "^refs/heads/\\([^\s]+\\)$" merge)
    (substring (match-string 1 merge) 0 -1)))

(defun omm-create-github-new-mr-url
    (host branch)
  "Generates a url that will open gitlab ui to make a PR for given branch."
  (concat "https://" host "/pull/new/" branch))

(defun omm-create-gitlab-new-mr-url
    (host branch)
  "Generates a url that will open gitlab ui to make a PR for given branch."
  (concat "https://" host "/merge_requests/new?merge_request%5Bsource_branch%5D=" (url-hexify-string branch)))


(defun omm-create-mr-for-branch
    ()
  "Open the create mr page for current remote branch."
  (interactive)
  (let ((host (omm-get-repo-link))
        (branch (omm-get-remote-branch (magit-get-current-branch))))
    (cond
      ((string-match "github" host) (browse-url (omm-create-github-new-mr-url host branch)))
      ((string-match "gitlab" host) (browse-url (omm-create-gitlab-new-mr-url host branch)))
      (t (message "IDK how to open an MR on %s. Edit the config to add a handler for this service!" host)))))

#+END_SRC

** Install Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit-status
  :ensure t
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (transient-append-suffix `magit-branch "S" '("M" "Create MR" omm-create-mr-for-branch)))


#+END_SRC

* Looks
** Theme
  Theme stuff.
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init
  (load-theme 'spacemacs-dark t))
(use-package powerline
  :ensure t
  :demand t
  :config
  (powerline-default-theme))
#+END_SRC

** Emacs GUI settings
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

* Projectile Configuration
  Project management.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :defer .5
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (projectile-register-project-type 'makefile '("Makefile")
    :compile "make build"
    :test "make test"))
#+END_SRC

TODO: [[https://www.emacswiki.org/emacs/NeoTree#toc8][NeoTree setup with projectile and Evil]]
OR TreeMacs...

* Utils
** General
   Fix shell commands
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t) ; Auto reload files

(use-package exec-path-from-shell
  :demand t
  :config
  (when (memq window-system '(mac ns x)) ; Syncs $MANPATH, $PATH and exec-path with shell config 
    (exec-path-from-shell-initialize)))  ; (does not work on windows)
#+END_SRC

  Better emoji support.
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :demand t
  :defer 0.3
  :config
  (global-emojify-mode t))
#+END_SRC

  Save emacs state on close.
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

  Also, emacs does this annoying thing where it will create a bunch of 
  temporary files like backups, swaps, and autosaves. Lets tame this behavior a little...
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
(setq create-lockfiles nil)  ; stp[ creatomg #lockfile
(setq backup-directory-alist '(("" . "~/.emacs.d/backup"))) ; Put all backups in one place (and not in the project)
#+END_SRC

** Ido Configuration
   Fuzzy search and auto complete.
 #+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(use-package ido-completing-read+ :demand t :defer 0.7)
(ido-mode 1)
 #+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :commands ace-window
  :config
  (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC

** NeoTree
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if window-system
  :ensure t
  :demand t
  :defer .1
  :config
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))
    
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
        (file-name (buffer-file-name)))
    (if project-dir
        (progn
        (neotree-dir project-dir)
        (neotree-find file-name))
    (message "Could not find git project root."))))

(use-package neotree
  :ensure t
  :after all-the-icons
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (add-hook 'neotree-mode-hook
    (lambda ()
      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
      (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
      (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
      (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
      (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
      (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
      (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
      (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
      (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)

      (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
      (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split))))

#+END_SRC

** Company
   
#+BEGIN_SRC emacs-lisp
(use-package company               
  :ensure t
  :defer t
  :init (global-company-mode)
  :config
  (progn
    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t
          ;; Easy navigation to candidates with M-<n>
          company-show-numbers t)
    (setq company-dabbrev-downcase nil))
  :diminish company-mode) 
#+END_SRC

** Rest Client
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t)
#+END_SRC
* Language Stuff
** General Stuff
#+BEGIN_SRC emacs-lisp
;; Dont use tabs for indenting
(setq-default indent-tabs-mode nil)

(use-package flycheck
  :demand t
  :config
  (global-flycheck-mode))

(use-package rainbow-delimiters :ensure t :demand t)
(use-package paredit :ensure t :demand t)
(use-package evil-paredit :ensure t :demand t)
#+END_SRC

** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :commands slime-mode
  :init
  (setq inferior-lisp-program "/usr/local/bin/clisp")
  (setq slime-contribs '(slime-fancy)))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
; Base mode
(use-package clojure-mode
  :ensure t
  :mode "\\.clj"
  :interpreter "clojure"
  :hook
  (clojure-mode . rainbow-delimiters-mode)
  (clojure-mode . enable-paredit-mode)
  (clojure-mode . evil-paredit-mode))
  
(use-package clojure-mode-extra-font-locking
  :ensure t
  :after (clojure-mode))

(use-package cider :ensure t :after clojure-mode)

#+END_SRC

** Elixir Support
   # TODO Properly configure alchemist
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode 
    :ensure t
    :mode 
    (("\\.ex" . elixir-mode)
    ("\\.exs" . elixir-mode))
    :interpreter "elixir"
    ;; Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.
    ;;(add-hook 'elixir-mode-hook
      ;;(lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
  )
  
  (use-package alchemist 
    :ensure t
    :hook
    (elixir-mode . alchemist-mode)
    ;:config
    ;(setq alchemist-test-display-compilation-output f)
)
#+END_SRC

** YAML
   For editing yaml.
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode
  "\\.yaml"
  "\\.yml")
#+END_SRC

** Dockerfiles
   Dockerfile support.
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode
  "^Dockerfile$")
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :mode
  "\\.go")
#+END_SRC

* Kubernetes
  Because kubernetes can be controlled from emacs too...
  
#+BEGIN_SRC emacs-lisp
(use-package kubernetes ; use M-x kubernetes-overview to invoke
  :disabled ; Not sure if i want to use this yet...
  :ensure t
  :commands (kubernetes-overview))

(use-package kubernetes-evil
  :ensure t
  :after kubernetes)
#+END_SRC
